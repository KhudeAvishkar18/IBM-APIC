swagger: '2.0'
info:
  title: 1194_JWT
  x-ibm-name: 1194_jwt
  version: 1.0.0
x-ibm-configuration:
  cors:
    enabled: true
  gateway: datapower-api-gateway
  type: rest
  phase: realized
  enforced: true
  testable: true
  assembly:
    execute:
      - gatewayscript:
          version: 2.0.0
          title: gatewayscript
          source: >
            var jose = require('jose');

            var jwt = require('jwt');


            // JWT Claims

            var claims = {
              'iss': 'ibm',
              'aud': ['datapower', 'gatewayscript'],
              'exp': Math.floor(Date.now() / 1000) + 60 * 60  // expires in 1 hour
            };


            // Signing key for HS256

            var secretKey =
            Buffer.from('AliceAliceAliceAliceAliceAliceAliceA!'); // 32 bytes


            // Encryption key for A128CBC-HS256

            var encKey = Buffer.from('12345678901234567890123456789012'); // 32
            bytes


            // JWS header

            var jwsHeader = jose.createJWSHeader(secretKey, 'HS256');


            // JWE header

            var jweHeader = jose.createJWEHeader('A128CBC-HS256')
              .setProtected('alg', 'dir')
              .setProtected('cty', 'JWT')
              .setKey(encKey);

            // Encode (sign and encrypt), then immediately decode (decrypt and
            verify)

            var encoder = new jwt.Encoder(claims);

            encoder
              .addOperation('sign', jwsHeader)
              .addOperation('encrypt', jweHeader)
              .encode(function (error, token) {
                if (error) {
                  session.output.write('error creating JWT: ' + error);
                } else {
                  // Decode (decrypt + verify + validate)
                  var decoder = new jwt.Decoder(token);
                  decoder
                    .addOperation('decrypt', encKey)
                    .addOperation('verify', secretKey)
                    .addOperation('validate', { 'aud': 'datapower' })
                    .decode(function (error, decodedClaims) {
                      if (error) {
                        session.output.write('error validating JWT: ' + error);
                      } else {
                        session.output.write("Token :" + token + "\n\nClaims :" + JSON.stringify(decodedClaims));
                      }
                    });
                }
              });
  properties:
    target-url:
      value: http://example.com/operation-name
      description: The URL of the target service
      encoded: false
  activity-log:
    enabled: true
    success-content: activity
    error-content: payload
basePath: /1194_jwt
paths:
  /:
    get:
      responses:
        '200':
          description: success
          schema:
            type: string
      consumes: []
      produces: []
    put:
      responses:
        '200':
          description: success
          schema:
            type: string
      consumes: []
      produces: []
    post:
      responses:
        '200':
          description: success
          schema:
            type: string
      consumes: []
      produces: []
    delete:
      responses:
        '200':
          description: success
          schema:
            type: string
      consumes: []
      produces: []
    head:
      responses:
        '200':
          description: success
          schema:
            type: string
      consumes: []
      produces: []
    patch:
      responses:
        '200':
          description: success
          schema:
            type: string
      consumes: []
      produces: []
securityDefinitions:
  clientID:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
security:
  - clientID: []
schemes:
  - https
